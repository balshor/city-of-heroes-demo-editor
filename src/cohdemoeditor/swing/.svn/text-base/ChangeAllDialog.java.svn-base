/*
 * ChangeAllDialog.java
 *
 * Created on June 21, 2005, 9:38 AM
 */

package cohdemoeditor.swing;

import javax.swing.*;

import cohdemoeditor.DemoCommandList;
import cohdemoeditor.ShowsAbsoluteTimesListener;

/**
 * This dialog allows the user to change all visible commands to having the
 * specified time, reference, command, and/or argument.
 * 
 * @author Darren Lee
 */
@SuppressWarnings("serial")
public class ChangeAllDialog extends JCenteringDialog implements
		ShowsAbsoluteTimesListener {

	private DemoCommandList target;

	/** Creates new form ChangeAllDialog */
	public ChangeAllDialog(DemoCommandList cmdList) {
		super(DemoEditor.getEditor(), true);
		setTarget(cmdList);
		initComponents();
	}

	/**
	 * Returns the target DemoCommandList. Simple getter.
	 * 
	 * @return
	 */
	public DemoCommandList getTarget() {
		return target;
	}

	/**
	 * Sets the target DemoCommandList.
	 * 
	 * @param target
	 */
	public void setTarget(DemoCommandList target) {
		if (this.target != null)
			this.target.removeShowsAbsoluteTimesListener(this);
		this.target = target;
		if (target != null)
			target.addShowsAbsoluteTimesListener(this);
	}

	/**
	 * Resets the UI elements to their initial values.
	 */
	protected void resetDialog() {
		timeBox.setSelected(false);
		refBox.setSelected(false);
		cmdBox.setSelected(false);
		argBox.setSelected(false);
		timeSpinner.setValue(0);
		refSpinner.setValue(0);
		cmdField.setText("");
		argSpinner.setValue(0);
		argField.setText("");
	}

	/**
	 * Listener method. Updates the timeBox to display the correct label
	 * (Absolute or Relative time).
	 */
	public void showsAbsoluteTimesChanged(DemoCommandList source,
			boolean newValue) {
		if (target == null || target != source)
			return;
		timeBox.setText(newValue ? "Abs. Time" : "Rel. Time");
	}

	/**
	 * This method does the actual changing, mostly by forwarding the command to
	 * the DemoCommandList.
	 * 
	 * @return true if successful, false otherwise
	 */
	protected boolean doChangeAll() {
		if (target == null)
			return true;
		javax.swing.undo.CompoundEdit edit = new javax.swing.undo.CompoundEdit();
		try {
			if (timeBox.isSelected())
				timeSpinner.commitEdit();
			if (refBox.isSelected())
				refSpinner.commitEdit();
			if (argBox.isSelected())
				argSpinner.commitEdit();
		} catch (java.text.ParseException pe) {
			JOptionPane.showMessageDialog(this,
					"Parse error, please check the numerical values.", "Error",
					JOptionPane.ERROR_MESSAGE);
			return false;
		}
		if (timeBox.isSelected()) {
			edit.addEdit(target.editVisibleTimes((Integer) timeSpinner
					.getValue()));
		}
		if (refBox.isSelected())
			edit.addEdit(target
					.editVisibleRefs((Integer) refSpinner.getValue()));
		if (cmdBox.isSelected())
			edit.addEdit(target.editVisibleCmds(cmdField.getText()));
		if (argBox.isSelected()) {
			int argNum = (Integer) argSpinner.getValue();
			if (argNum == 0)
				edit.addEdit(target.editVisibleArgs(argField.getText()));
			else
				edit.addEdit(target.editVisibleArgs(argNum - 1, argField
						.getText()));
		}
		edit.end();
		DemoEditor.getEditor().addUndoableEdit(edit);
		return true;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		centerPanel = new javax.swing.JPanel();
		timeBox = new javax.swing.JCheckBox();
		timeSpinner = new javax.swing.JSpinner();
		refBox = new javax.swing.JCheckBox();
		refSpinner = new javax.swing.JSpinner();
		cmdBox = new javax.swing.JCheckBox();
		cmdField = new javax.swing.JTextField();
		argBox = new javax.swing.JCheckBox();
		argPanel = new javax.swing.JPanel();
		argSpinner = new javax.swing.JSpinner();
		argField = new javax.swing.JTextField();
		buttonPanel = new javax.swing.JPanel();
		okayButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		helpButton = new javax.swing.JButton();

		setTitle("Change All Visible Commands");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				formWindowClosing(evt);
			}
		});

		centerPanel.setLayout(new java.awt.GridLayout(4, 2, 5, 5));

		centerPanel.setBorder(new javax.swing.border.EmptyBorder(
				new java.awt.Insets(5, 5, 5, 5)));
		timeBox.setText("Time");
		timeBox.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				timeBoxItemStateChanged(evt);
			}
		});

		centerPanel.add(timeBox);

		timeSpinner.setEnabled(false);
		centerPanel.add(timeSpinner);

		refBox.setText("Reference (CAM = -1)");
		refBox.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				refBoxItemStateChanged(evt);
			}
		});

		centerPanel.add(refBox);

		refSpinner.setEnabled(false);
		centerPanel.add(refSpinner);

		cmdBox.setText("Command");
		cmdBox.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				cmdBoxItemStateChanged(evt);
			}
		});

		centerPanel.add(cmdBox);

		cmdField.setEnabled(false);
		centerPanel.add(cmdField);

		argBox.setText("Argument (0 = change all)");
		argBox.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				argBoxItemStateChanged(evt);
			}
		});

		centerPanel.add(argBox);

		argPanel.setLayout(new javax.swing.BoxLayout(argPanel,
				javax.swing.BoxLayout.Y_AXIS));

		argSpinner.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
		argSpinner.setToolTipText("which argument to change (0 = all)");
		argSpinner.setEnabled(false);
		argPanel.add(argSpinner);

		argField.setEnabled(false);
		argPanel.add(argField);

		centerPanel.add(argPanel);

		getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

		okayButton.setMnemonic('O');
		okayButton.setText("Okay");
		okayButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okayButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(okayButton);

		cancelButton.setMnemonic('C');
		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(cancelButton);

		helpButton.setMnemonic('H');
		helpButton.setText("Help");
		helpButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				helpButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(helpButton);

		getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

		pack();
	}

	// </editor-fold>//GEN-END:initComponents

	private void okayButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_okayButtonActionPerformed
		if (doChangeAll()) {
			setVisible(false);
			resetDialog();
		}
	}// GEN-LAST:event_okayButtonActionPerformed

	private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_helpButtonActionPerformed
		JOptionPane
				.showMessageDialog(
						this,
						"This dialog will change all visible commands to have the specified values.",
						"Temporary Help", JOptionPane.PLAIN_MESSAGE);
	}// GEN-LAST:event_helpButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_cancelButtonActionPerformed
		setVisible(false);
		resetDialog();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:
		// event_formWindowClosing
		resetDialog();
	}// GEN-LAST:event_formWindowClosing

	private void argBoxItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-
		// FIRST
		// :
		// event_argBoxItemStateChanged
		argField.setEnabled(argBox.isSelected());
		argSpinner.setEnabled(argBox.isSelected());
	}// GEN-LAST:event_argBoxItemStateChanged

	private void cmdBoxItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-
		// FIRST
		// :
		// event_cmdBoxItemStateChanged
		cmdField.setEnabled(cmdBox.isSelected());
	}// GEN-LAST:event_cmdBoxItemStateChanged

	private void refBoxItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-
		// FIRST
		// :
		// event_refBoxItemStateChanged
		refSpinner.setEnabled(refBox.isSelected());
	}// GEN-LAST:event_refBoxItemStateChanged

	private void timeBoxItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-
		// FIRST
		// :
		// event_timeBoxItemStateChanged
		timeSpinner.setEnabled(timeBox.isSelected());
	}// GEN-LAST:event_timeBoxItemStateChanged

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JCheckBox argBox;
	private javax.swing.JTextField argField;
	private javax.swing.JPanel argPanel;
	private javax.swing.JSpinner argSpinner;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel centerPanel;
	private javax.swing.JCheckBox cmdBox;
	private javax.swing.JTextField cmdField;
	private javax.swing.JButton helpButton;
	private javax.swing.JButton okayButton;
	private javax.swing.JCheckBox refBox;
	private javax.swing.JSpinner refSpinner;
	private javax.swing.JCheckBox timeBox;
	private javax.swing.JSpinner timeSpinner;
	// End of variables declaration//GEN-END:variables

}
