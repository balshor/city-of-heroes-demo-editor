/*
 * DisplayInfoPanel.java
 *
 * Created on June 12, 2005, 7:57 PM
 */

package cohdemoeditor.swing;

import javax.swing.*;

import cohdemoeditor.FilterList;
import cohdemoeditor.FilterListManager;

import java.awt.*;

/**
 * The FilterPanel appears in each DemoCommandListEditor as a panel in the lower
 * right corner containing a list of filters and six buttons used to add,
 * remove, load, and save filters. It listens to a FilterList as its TableModel.
 * 
 * @author Darren Lee
 */
@SuppressWarnings("serial")
public class FilterPanel extends javax.swing.JPanel implements
		javax.swing.event.TableModelListener {

	private FilterList filterList;
	private AddFilterDialog addDialog = null;
	private FilterListManager flmanager = null;
	private static SaveFilterListDialog saveFilterListDialog = null;
	private static LoadFilterListDialog loadFilterListDialog = null;

	/**
	 * Creates a new DisplayInfoPanel
	 * 
	 * @param filterList
	 *            the FilterList to display
	 * @param parent
	 *            the parent DemoEditor
	 */
	public FilterPanel(FilterList filterList) {
		this.filterList = filterList;
		filterList.addTableModelListener(this);
		setPreferredSize(new Dimension(400, 200));
		if (saveFilterListDialog == null) {
			saveFilterListDialog = new SaveFilterListDialog(DemoEditor
					.getEditor());
		}
		if (loadFilterListDialog == null)
			loadFilterListDialog = new LoadFilterListDialog(DemoEditor
					.getEditor());
		initComponents();
	}

	/**
	 * Creates a new DisplayInfoPanel
	 * 
	 * @param filterList
	 *            the FilterList to display
	 * @param parent
	 *            the parent Dialog
	 */
	public FilterPanel(FilterList filterList, Dialog parent) {
		this.filterList = filterList;
		filterList.addTableModelListener(this);
		setPreferredSize(new Dimension(400, 200));
		initComponents();
		loadFilterButton.setEnabled(false);
		saveFilterButton.setEnabled(false);
	}

	/**
	 * Sets the filter list manager
	 * 
	 * @param flm
	 */
	public void setFilterListManager(FilterListManager flm) {
		flmanager = flm;
		updateButtonStatus();
	}

	/**
	 * Simple getter
	 * 
	 * @return
	 */
	public FilterListManager getFilterListManager() {
		return flmanager;
	}

	/**
	 * Helper method to enable/disable the save and load buttons
	 */
	private void updateButtonStatus() {
		saveFilterButton.setEnabled(flmanager != null && !filterList.isEmpty());
		loadFilterButton.setEnabled(flmanager != null);
	}

	/**
	 * Method called when the Save button is pressed. Displays the
	 * saveFilterListDialog
	 */
	protected void doSaveFilter() {
		if (flmanager == null || saveFilterListDialog == null) {
			JOptionPane
					.showMessageDialog(
							null,
							"This Filter Panel does not have a Filter List Manager associated with it.",
							"Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		saveFilterListDialog.showSaveFilterList();

	}

	/**
	 * Method called when the Load button is pressed. Displays the
	 * loadFilterListDialog
	 */
	protected void doLoadFilter() {
		if (flmanager == null || loadFilterListDialog == null) {
			JOptionPane
					.showMessageDialog(
							null,
							"This Filter Panel does not have a Filter List Manager associated with it.",
							"Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		loadFilterListDialog.showLoadFilterList(filterList, flmanager);
	}

	/**
	 * Listener method. Updates the button status.
	 */
	public void tableChanged(javax.swing.event.TableModelEvent e) {
		updateButtonStatus();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		scroller = new javax.swing.JScrollPane();
		filterTable = new javax.swing.JTable();
		filterButtonPanel = new javax.swing.JPanel();
		addFilterButton = new javax.swing.JButton();
		removeFilterButton = new javax.swing.JButton();
		clearFilterButton = new javax.swing.JButton();
		saveFilterButton = new javax.swing.JButton();
		loadFilterButton = new javax.swing.JButton();
		helpFilterButton = new javax.swing.JButton();

		setLayout(new java.awt.BorderLayout());

		filterTable.setModel(filterList);
		scroller.setViewportView(filterTable);

		add(scroller, java.awt.BorderLayout.CENTER);

		filterButtonPanel.setLayout(new java.awt.GridLayout(2, 3));

		addFilterButton.setText("Add Filter");
		addFilterButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
		addFilterButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addFilterButtonActionPerformed(evt);
			}
		});

		filterButtonPanel.add(addFilterButton);

		removeFilterButton.setText("Remove Filter");
		removeFilterButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
		removeFilterButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						removeFilterButtonActionPerformed(evt);
					}
				});

		filterButtonPanel.add(removeFilterButton);

		clearFilterButton.setText("Remove All");
		clearFilterButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
		clearFilterButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						clearFilterButtonActionPerformed(evt);
					}
				});

		filterButtonPanel.add(clearFilterButton);

		saveFilterButton.setText("Save Filters");
		saveFilterButton.setEnabled(false);
		saveFilterButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
		saveFilterButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveFilterButtonActionPerformed(evt);
			}
		});

		filterButtonPanel.add(saveFilterButton);

		loadFilterButton.setText("Load Filters");
		loadFilterButton.setEnabled(false);
		loadFilterButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
		loadFilterButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				loadFilterButtonActionPerformed(evt);
			}
		});

		filterButtonPanel.add(loadFilterButton);

		helpFilterButton.setText("Filter Help");
		helpFilterButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
		helpFilterButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				helpFilterButtonActionPerformed(evt);
			}
		});

		filterButtonPanel.add(helpFilterButton);

		add(filterButtonPanel, java.awt.BorderLayout.SOUTH);

	}

	// </editor-fold>//GEN-END:initComponents

	private void loadFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_loadFilterButtonActionPerformed
		doLoadFilter();
	}// GEN-LAST:event_loadFilterButtonActionPerformed

	private void saveFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_saveFilterButtonActionPerformed
		doSaveFilter();
	}// GEN-LAST:event_saveFilterButtonActionPerformed

	private void helpFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_helpFilterButtonActionPerformed
		JOptionPane
				.showMessageDialog(
						null,
						"This panel shows the current filters acting on the demo.\nOnly commands that match all \"show\" filters and do not match any \"hide\" filters will be displayed.",
						"Temporary Help Message",
						JOptionPane.INFORMATION_MESSAGE);
	}// GEN-LAST:event_helpFilterButtonActionPerformed

	private void clearFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_clearFilterButtonActionPerformed
		filterList.clear();
	}// GEN-LAST:event_clearFilterButtonActionPerformed

	private void removeFilterButtonActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:
		// event_removeFilterButtonActionPerformed
		int[] indices = filterTable.getSelectedRows();
		if (indices.length == 0)
			return;
		for (int i : indices) {
			filterList.remove(i);
		}
	}// GEN-LAST:event_removeFilterButtonActionPerformed

	private void addFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_addFilterButtonActionPerformed
		if (addDialog == null) {
			addDialog = new AddFilterDialog(DemoEditor.getEditor(), false,
					filterList);
		}
		addDialog.setVisible(true);
	}// GEN-LAST:event_addFilterButtonActionPerformed

	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Variable Declaration ">
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addFilterButton;
	private javax.swing.JButton clearFilterButton;
	private javax.swing.JPanel filterButtonPanel;
	private javax.swing.JTable filterTable;
	private javax.swing.JButton helpFilterButton;
	private javax.swing.JButton loadFilterButton;
	private javax.swing.JButton removeFilterButton;
	private javax.swing.JButton saveFilterButton;
	private javax.swing.JScrollPane scroller;
	// End of variables declaration//GEN-END:variables
	// </editor-fold>
}
