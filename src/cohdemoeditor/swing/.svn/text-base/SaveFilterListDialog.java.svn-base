/*
 * SaveFilterListDialog.java
 *
 * Created on June 21, 2005, 10:37 PM
 */

package cohdemoeditor.swing;

import java.awt.*;
import javax.swing.*;

import cohdemoeditor.FilterList;

/**
 * This dialog provides the user interface that allows a user to save a list of
 * filters for future use. It requests copies of the current filter list and
 * passes them on to the FilterListManager for storage.
 * 
 * @author Darren Lee
 */
@SuppressWarnings("serial")
public class SaveFilterListDialog extends JCenteringDialog {

	private DemoEditor editor = null;

	/**
	 * Creates a new SaveFilterListDialog
	 * 
	 * @param editor
	 *            the DemoEditor parent
	 */
	public SaveFilterListDialog(DemoEditor editor) {
		super(editor, true);
		this.editor = editor;
		setPreferredSize(new Dimension(400, 200));
		initComponents();
	}

	/**
	 * Creates a new SaveFilterListDialog. For use by wizards, mostly.
	 * 
	 * @param parent
	 *            the parent dialog
	 */
	public SaveFilterListDialog(Dialog parent) {
		super(parent, true);
		setPreferredSize(new Dimension(400, 200));
		initComponents();
	}

	/**
	 * Shows the SaveFilterListDialog.
	 */
	public void showSaveFilterList() {
		if (editor == null)
			return;
		filterList.setModel(editor.getFilterListManager());
		pack();
		textField.setText(editor.getSelectedDemo().getDemoCommandList()
				.getFilterList().getName());
		setVisible(true);
	}

	/**
	 * Convenience method for when the Cancel button is pressed.
	 */
	private void doCancel() {
		setVisible(false);
	}

	/**
	 * Method called when the Save button is pressed.
	 */
	private void doSave() {
		if (editor == null) {
			JOptionPane.showMessageDialog(this,
					"Error: DemoEditor has not been set.");
			return;
		}
		FilterList toSave = editor.getSelectedDemo().getDemoCommandList()
				.getFilterList().clone();
		toSave.setName(textField.getText());
		editor.getFilterListManager().addFilterList(toSave);
		setVisible(false);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		southPanel = new javax.swing.JPanel();
		textField = new javax.swing.JTextField();
		saveButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		titleLabel = new javax.swing.JLabel();
		scroller = new javax.swing.JScrollPane();
		filterList = new javax.swing.JList();

		setTitle("Save Filter List");
		southPanel.setLayout(new javax.swing.BoxLayout(southPanel,
				javax.swing.BoxLayout.X_AXIS));

		southPanel.add(textField);

		saveButton.setText("Save");
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});

		southPanel.add(saveButton);

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		southPanel.add(cancelButton);

		getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

		titleLabel
				.setText("Under which name would you like to save your filters? (duplicates overwrite)");
		titleLabel.setBorder(new javax.swing.border.EmptyBorder(
				new java.awt.Insets(5, 5, 5, 5)));
		getContentPane().add(titleLabel, java.awt.BorderLayout.NORTH);

		scroller
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		filterList
				.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		filterList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						filterListValueChanged(evt);
					}
				});

		scroller.setViewportView(filterList);

		getContentPane().add(scroller, java.awt.BorderLayout.CENTER);

		pack();
	}

	// </editor-fold>//GEN-END:initComponents

	private void filterListValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_filterListValueChanged
		if (editor != null)
			textField.setText(editor.getFilterListManager().getFilterList(
					filterList.getMinSelectionIndex()).getName());
	}// GEN-LAST:event_filterListValueChanged

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_cancelButtonActionPerformed
		doCancel();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN
		// -
		// FIRST
		// :
		// event_saveButtonActionPerformed
		doSave();
	}// GEN-LAST:event_saveButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton cancelButton;
	private javax.swing.JList filterList;
	private javax.swing.JButton saveButton;
	private javax.swing.JScrollPane scroller;
	private javax.swing.JPanel southPanel;
	private javax.swing.JTextField textField;
	private javax.swing.JLabel titleLabel;
	// End of variables declaration//GEN-END:variables

}
